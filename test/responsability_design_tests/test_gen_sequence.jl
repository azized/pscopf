using Test
using Dates
using JuMP

#=
sequenceur can have a :
    init metod : launched at the beginning to initialize context and init first network situation
    step method :  to launch an operation without changing the ech
    step_ech method : to launch an operation and change ech
    final_step method : to launch a final operation at the end of the execution (eg assessment or evaluate_costs ...)
=#


@testset verbose=true "sequence_generation" begin

    #=
    INPUT :
        Network := Electric grid description
        TS := target time steps (dates d'intérêt)
        Mode de gestion = mode 1
        ECH := list of horizon points as generated by the generate_ech responsibility
    EXPECTED OUTPUT :
        At each horizon point, an ordered list of operations (a sequence)
    CARE POINTs:
        - generate_sequences assumes TS is sorted and unique ?
        - generate_sequences assumes ECH is sorted and unique ?
    =#
    @testset "mode_1" begin
        grid = create_grid(#=FIXME initial input or mocks=#)
        ts1 #=FIXME initial input or mocks=#
        TS = create_TS(Dates.DateTime(ts1)) #ts1 .+ [Dates.Minute(0), Dates.Minute(15), Dates.Minute(30), Dates.Minute(45)]
        mode = PSCOPF_MODE_1
        ECH = generate_ech(grid, TS, mode)

        SEQUENCES = generate_sequences(grid, TS, ECH, mode)

        EXPECTED_SEQUENCES #=FIXME=#
        @test length(SEQUENCES) == length(EXPECTED_SEQUENCES) == length(ECH)
        for ech in ECH
            @test length(SEQUENCES[ech]) == length(EXPECTED_SEQUENCES[ech])
            for (operation, expected_operation) in zip(SEQUENCES[ech], EXPECTED_SEQUENCES[ech])
                @test isa(operation, expected_operation)
                # to check, for example, that we have the following [instance of Mode1MarketClass, instance of Mode1TSOClass]
            end
        end
    end

    @testset "mode_2" begin
        @test false
    end

    @testset "mode_3" begin
        @test false
    end

end
